proxy_cache_path  /data/nginx/cache levels=1:2 keys_zone=nuxt-cache:25m max_size=1g inactive=60m use_temp_path=off;

map $sent_http_content_type $expires {
    ~*application/font-woff  1y;
    ~*application/font-woff2 1y;
    ~*application/javascript 1y;
    ~*font/                  1y;
    ~*image/                 1y;
    ~*text/html              1h;

    default                  7d;
}

server {
    listen          8080;
    server_name     _;
    # server_name     server_name ~^(?<subdomain>.*?)\.;
    # resolver kube-dns.kube-system.svc.cluster.local valid=5s;
    
    gzip            on;
    gzip_comp_level 5;
    gzip_min_length 1000;
    gzip_proxied    any;
    gzip_vary       on;
    gzip_types      application/javascript
                    application/json
                    application/ld+json
                    application/manifest+json
                    application/xml
                    font/eot
                    font/otf
                    font/ttf
                    font/woff
                    font/woff2
                    image/svg+xml
                    text/css
                    text/plain;

    charset utf-8;

    # @todo fix content security policy
    # set $content_security_policy "
    #     default-src 'self' 'unsafe-inline';
    #     child-src https://www.facebook.com/ https://staticxx.facebook.com/;
    #     connect-src: 'self' https://www.google-analytics.com https://www.facebook.com/tr/;
    #     font-src 'self' https://fonts.gstatic.com data:;
    #     form-action 'self' https://connect.facebook.net;
    #     frame-src https://bid.g.doubleclick.net;
    #     img-src 'self' 'unsafe-inline' data: https://parkos.com https://*.parkos.com https://assets.parkos.com.au https://googleads.g.doubleclick.net https://www.google.com https://ssl.gstatic.com https://www.gstatic.com https://www.google-analytics.com https://www.google.com www.googletagmanager.com https://www.facebook.com/;
    #     object-src 'none';
    #     script-src 'self' 'unsafe-inline' 'unsafe-eval' https://tagmanager.google.com https://www.google-analytics.com https://ssl.google-analytics.com https://www.googleadservices.com https://googleads.g.doubleclick.net https://www.google.com https://www.googletagmanager.com https://maps.googleapis.com https://script.hotjar.com https://static.hotjar.com https://static.zdassets.com https://bat.bing.com https://connect.facebook.net;
    #     style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
    # ";
    set $content_security_policy "default-src 'self' 'unsafe-inline' https:; frame-ancestors 'self' https://bat.bing.com; img-src 'self' 'unsafe-inline' https: data:; object-src 'none'; script-src 'unsafe-inline' 'unsafe-eval' https:;";

    # to serve generated static pages, uncomment root and location directives
    # below and change the exisiting "location /" directive to 'location @proxy"
    # root /app/dist;

    # location ~* \.(?:ico|gif|jpe?g|png|woff2?|eot|otf|ttf|svg|js|css)$ {
    #     expires $expires;
    #     add_header Pragma public;
    #     add_header Cache-Control "public";

    #     try_files $uri $uri/ @proxy;
    # }

    # location / {
    #     expires $expires;
    #     add_header Content-Security-Policy $content_security_policy;
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #     add_header X-Frame-Options "SAMEORIGIN";

    #     try_files $uri $uri/index.html @proxy;
    # }

    location / {
        expires $expires;
        # Adding cache-control header here as a test;
        #
        # Nuxt seems to also set this header, but with a value we don't want.
        #
        # It seems that some intermediate server (likely the Google (App Engine)
        # Frontend) reads the cache-control header and caches any non-private
        # response.
        #
        # We need to set the value to private to prevent caching slugs for the
        # wrong language since we're serving all domains from the *.appspot.com
        # app url as a back end for our url map routing proxy.
        #
        # So, for example, these urls:
        # - https://staging.parkos.IT/parcheggio-aeroporto-torino/;
        # - https://staging.parkos.NL/parcheggio-aeroporto-torino/;
        #
        # will both be served from:
        # - https://mpl-airport-page-dot-parkos-staging.appspot.com/parcheggio-aeroporto-torino/.
        #
        # And since the IT version will return a HTTP 200 status with a (by
        # default) public cache-control header, the response will be cached and
        # served for the NL website as well (while it should return a HTTP 404).
        add_header Cache-Control "private,max-age=1440";
        add_header Content-Security-Policy $content_security_policy;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Cache-Status $upstream_cache_status;

        proxy_redirect                      off;
        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host   $host;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_ignore_headers        Cache-Control;
        proxy_http_version          1.1;
        proxy_read_timeout          1m;
        proxy_connect_timeout       1m;
        # proxy_pass                  http://$subdomain.example.svc.cluster.local;
        proxy_pass                  http://127.0.0.1:3000;
        proxy_cache                 nuxt-cache;
        proxy_cache_bypass          $cookie_nocache $arg_nocache;
        proxy_cache_valid           200 302 301 1h;
        proxy_cache_valid           404 1m;
        proxy_cache_background_update   on;
        proxy_cache_lock            on;
        proxy_cache_use_stale       error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_key             $scheme$host$http_x_forwarded_server$uri;

        keepalive_requests 0;
    }
}
